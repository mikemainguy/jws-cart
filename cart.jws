eyJhbGciOiJQUzI1NiJ9.{
    "cartId": "61482694-f903-4b12-8740-1d3bbc21d635",
    "saveForLaterId": "selectivecartCTR19f06137-c7d6-4e69-b579-224817dc0e69",
    "cartSummary": {
        "shippingFees": {
            "value": 0,
            "minPrice": 0,
            "maxPrice": 0,
            "frequency": "0"
        },
        "subTotalAmt": {
            "value": 239.95,
            "minPrice": 0,
            "maxPrice": 0,
            "frequency": ""
        },
        "absoluteTotal": 239.95,
        "taxLines": [
            {
                "taxName": "HST",
                "taxValue": {
                    "value": 31.19,
                    "minPrice": 0,
                    "maxPrice": 0,
                    "frequency": ""
                }
            }
        ],
        "totalAmt": {
            "value": 239.95,
            "minPrice": 0,
            "maxPrice": 0,
            "frequency": ""
        },
        "totalRebateAmt": null,
        "totalSavingAmt": {
            "value": 0,
            "minPrice": 0,
            "maxPrice": 0,
            "frequency": ""
        },
        "totalDiscount": {
            "value": 0,
            "minPrice": 0,
            "maxPrice": 0,
            "frequency": ""
        },
        "totalTaxAmt": null,
        "totalWithTaxesAmt": {
            "value": 271.14,
            "minPrice": 0,
            "maxPrice": 0,
            "frequency": ""
        },
        "ePPValue": 11.3
    },
    "contactInfo": {
        "email": "mike.mainguy@gmail.com",
        "phone": "2489358507"
    },
    "customerCallbackRequested": false,
    "vin": null,
    "bulkDeliveryOptions": [],
    "deliveryAddress": null,
    "deliveryMode": "BOPIS",
    "entryGroups": [
        {
            "groupNumber": null,
            "label": null,
            "groupType": null,
            "externalReferenceId": null,
            "entryGroup": [
                {
                    "groupNumber": null,
                    "priority": null,
                    "label": null,
                    "groupType": null,
                    "externalReferenceId": null
                }
            ]
        }
    ],
    "errorCode": null,
    "numberOfItems": 5,
    "orderEntries": [
        {
            "badges": [
                "EXCLUSIVE",
                "TOPRATED",
                "TESTEDFORLIFE"
            ],
            "OfferDesc": null,
            "brand": {
                "label": "BLUEHIVE",
                "url": null
            },
            "productWheelType": "",
            "cartEntryReference": null,
            "code": "0111915",
            "color": null,
            "currentPrice": {
                "value": 39.99,
                "minPrice": 0,
                "maxPrice": 0,
                "frequency": ""
            },
            "discount": {
                "value": 0,
                "minPrice": 0,
                "maxPrice": 0,
                "frequency": ""
            },
            "displayWasLabel": false,
            "feeMessages": [],
            "energyRebateAmt": null,
            "energyRebateIncluded": null,
            "entryNumber": 4,
            "entryType": "PRODUCT (PRO)",
            "errorCode": null,
            "fulfillment": {
                "orderableFromDC": false,
                "isEligibleToPickupFromStore": true,
                "isEligibleToShipHome": true,
                "isStorePickup": false,
                "deliveryMode": "BOPIS",
                "sourceTypes": [
                    {
                        "quantity": 1,
                        "productSourceType": "INSTORE",
                        "etaEarliest": "2024-08-19T17:00:00.000Z",
                        "etaLatest": null,
                        "minOrderQty": 4,
                        "storeShelfLocation": "Aisle 6"
                    }
                ],
                "stockItemAvailability": {
                    "dcQuantity": 0,
                    "storeQuantity": 5
                },
                "isEligibleForExpressDelivery": true,
                "isEndlessAisle": false
            },
            "isBulk": false,
            "images": [
                {
                    "altText": "Bluehive 75W Inverter, with USB Port Front_Three_Fourths_Angled_Left",
                    "mediaType": "GALLERY_IMAGE",
                    "isListingThumbnailImage": "false",
                    "url": "https://media-www.canadiantire.ca/product/automotive/car-care-accessories/auto-electronics/0111915/bluehive-75w-inverter-usb5v-500ma-black-ff650ef3-6d99-410f-850b-72d06856425c-jpgrendition.jpg"
                },
                {
                    "altText": "Bluehive 75W Inverter, with USB Port Front_Angled_Left",
                    "mediaType": "GALLERY_IMAGE",
                    "isListingThumbnailImage": "false",
                    "url": "https://media-www.canadiantire.ca/product/automotive/car-care-accessories/auto-electronics/0111915/bluehive-75w-inverter-usb5v-500ma-black-696f009c-da48-4ffa-9ad2-88918e6592c7.png"
                }
            ],
            "installationEligible": false,
            "installationTermConditionAccepted": false,
            "isPackagedItem": false,
            "isShipHome": true,
            "rebate": null,
            "maxPurchaseQty": null,
            "name": "Bluehive 75W Inverter, with USB Port",
            "originalPrice": {
                "minPrice": 0,
                "maxPrice": 0,
                "frequency": ""
            },
            "options": [],
            "packagedItem": false,
            "packageId": null,
            "vehicleInformation": null,
            "postTaxRebateAmt": null,
            "postTaxRebateIncluded": null,
            "preTaxRebateAmt": null,
            "preTaxRebateIncluded": null,
            "priceMessage": [
                {
                    "label": null,
                    "tooltip": null
                }
            ],
            "productStatus": "ACTIVE(ACT)",
            "quantity": 1,
            "salePriceEndDate": null,
            "sellable": true,
            "servicesList": null,
            "specifications": [],
            "staggeredGroup": null,
            "totalPrice": {
                "value": 39.99,
                "minPrice": 0,
                "maxPrice": 0,
                "frequency": ""
            },
            "url": "/en/pdp/bh-75w-inverter-0111915p.0111915.html",
            "merchCategories": [
                "AUTOMOTIVE",
                null,
                "MOBILE ELECTRONICS",
                "Mobile Power",
                "Inverters"
            ],
            "someoneElsePickingUp": null,
            "hasStoreAutoServiceCenter": true,
            "isRorProduct": false,
            "fulfillmentOptionAvailable": "bopis and sth",
            "fulFillmentStatus": null,
            "guaranteedFitment": null,
            "Fitted": false,
            "numberOfReviews": 160,
            "Rating": 4.0813,
            "shipFrom": "INSTORE",
            "isUrgentLowStock": null,
            "fitmentTypeCode": null,
            "baseProduct": "0111915P",
            "estimatedDeliveryDate": null,
            "triangleSelectBenefits": {
                "tsBrand": false,
                "tsBrandDiscount": 0.08,
                "tsEverydayDiscount": 0.04
            },
            "triangleBenefits": {
                "tsRewardsBaseLoyalty": 0.004,
                "tsTriangleMastercardBenefits": 0.04
            },
            "isReusableBag": false,
            "mrRegistryId": null,
            "selectedStoreServices": [],
            "supportedStoreServices": [],
            "balloonEntryType": null,
            "entryGroupNumbers": null
        },
        {
            "badges": [
                "EXCLUSIVE"
            ],
            "OfferDesc": null,
            "brand": {
                "label": "BLUEHIVE",
                "url": null
            },
            "productWheelType": "",
            "cartEntryReference": null,
            "code": "0112124",
            "color": null,
            "currentPrice": {
                "value": 39.99,
                "minPrice": 0,
                "maxPrice": 0,
                "frequency": ""
            },
            "discount": {
                "value": 0,
                "minPrice": 0,
                "maxPrice": 0,
                "frequency": ""
            },
            "displayWasLabel": false,
            "feeMessages": [],
            "energyRebateAmt": null,
            "energyRebateIncluded": null,
            "entryNumber": 3,
            "entryType": "PRODUCT (PRO)",
            "errorCode": null,
            "fulfillment": {
                "orderableFromDC": false,
                "isEligibleToPickupFromStore": true,
                "isEligibleToShipHome": true,
                "isStorePickup": false,
                "deliveryMode": "BOPIS",
                "sourceTypes": [
                    {
                        "quantity": 1,
                        "productSourceType": "INSTORE",
                        "etaEarliest": "2024-08-19T17:00:00.000Z",
                        "etaLatest": null,
                        "minOrderQty": 1,
                        "storeShelfLocation": "Aisle 3"
                    }
                ],
                "stockItemAvailability": {
                    "dcQuantity": 0,
                    "storeQuantity": 2
                },
                "isEligibleForExpressDelivery": true,
                "isEndlessAisle": false
            },
            "isBulk": false,
            "images": [
                {
                    "altText": "Bluehive 12 Volt AC/DC Converter Front_Three_Fourths_Angled_Left",
                    "mediaType": "GALLERY_IMAGE",
                    "isListingThumbnailImage": "false",
                    "url": "https://media-www.canadiantire.ca/product/automotive/electronics/mobile-electronics/0112124/bluehive-12-volt-ac-dc-converter-27ae9b86-951d-4813-aa4c-6b54c694ee39-jpgrendition.jpg"
                },
                {
                    "altText": "Bluehive 12 Volt AC/DC Converter CloseUp",
                    "mediaType": "LIFESTYLE_IMAGE",
                    "isListingThumbnailImage": "false",
                    "url": "https://media-www.canadiantire.ca/product/automotive/electronics/mobile-electronics/0112124/bluehive-12-volt-ac-dc-converter-cea6dd67-0ea0-431b-bfa5-067e6ef38d18-jpgrendition.jpg"
                }
            ],
            "installationEligible": false,
            "installationTermConditionAccepted": false,
            "isPackagedItem": false,
            "isShipHome": true,
            "rebate": null,
            "maxPurchaseQty": null,
            "name": "Bluehive 12 Volt AC/DC Converter",
            "originalPrice": {
                "minPrice": 0,
                "maxPrice": 0,
                "frequency": ""
            },
            "options": [],
            "packagedItem": false,
            "packageId": null,
            "vehicleInformation": null,
            "postTaxRebateAmt": null,
            "postTaxRebateIncluded": null,
            "preTaxRebateAmt": null,
            "preTaxRebateIncluded": null,
            "priceMessage": [
                {
                    "label": null,
                    "tooltip": null
                }
            ],
            "productStatus": "ACTIVE(ACT)",
            "quantity": 1,
            "salePriceEndDate": null,
            "sellable": true,
            "servicesList": null,
            "specifications": [],
            "staggeredGroup": null,
            "totalPrice": {
                "value": 39.99,
                "minPrice": 0,
                "maxPrice": 0,
                "frequency": ""
            },
            "url": "/en/pdp/6a-ac-dc-cnvrtr-0112124p.0112124.html",
            "merchCategories": [
                "AUTOMOTIVE",
                null,
                "MOBILE ELECTRONICS",
                "Mobile Power",
                "Inverters"
            ],
            "someoneElsePickingUp": null,
            "hasStoreAutoServiceCenter": true,
            "isRorProduct": false,
            "fulfillmentOptionAvailable": "bopis and sth",
            "fulFillmentStatus": null,
            "guaranteedFitment": null,
            "Fitted": false,
            "numberOfReviews": null,
            "Rating": null,
            "shipFrom": "INSTORE",
            "isUrgentLowStock": true,
            "fitmentTypeCode": null,
            "baseProduct": "0112124P",
            "estimatedDeliveryDate": null,
            "triangleSelectBenefits": {
                "tsBrand": false,
                "tsBrandDiscount": 0.08,
                "tsEverydayDiscount": 0.04
            },
            "triangleBenefits": {
                "tsRewardsBaseLoyalty": 0.004,
                "tsTriangleMastercardBenefits": 0.04
            },
            "isReusableBag": false,
            "mrRegistryId": null,
            "selectedStoreServices": [],
            "supportedStoreServices": [],
            "balloonEntryType": null,
            "entryGroupNumbers": null
        },
        {
            "badges": [
                "EXCLUSIVE"
            ],
            "OfferDesc": null,
            "brand": {
                "label": "BLUEHIVE",
                "url": null
            },
            "productWheelType": "",
            "cartEntryReference": null,
            "code": "0374571",
            "color": null,
            "currentPrice": {
                "value": 29.99,
                "minPrice": 0,
                "maxPrice": 0,
                "frequency": ""
            },
            "discount": {
                "value": 0,
                "minPrice": 0,
                "maxPrice": 0,
                "frequency": ""
            },
            "displayWasLabel": false,
            "feeMessages": [],
            "energyRebateAmt": null,
            "energyRebateIncluded": null,
            "entryNumber": 2,
            "entryType": "PRODUCT (PRO)",
            "errorCode": null,
            "fulfillment": {
                "orderableFromDC": false,
                "isEligibleToPickupFromStore": true,
                "isEligibleToShipHome": true,
                "isStorePickup": false,
                "deliveryMode": "BOPIS",
                "sourceTypes": [
                    {
                        "quantity": 1,
                        "productSourceType": "INSTORE",
                        "etaEarliest": "2024-08-19T17:00:00.000Z",
                        "etaLatest": null,
                        "minOrderQty": 1,
                        "storeShelfLocation": "Aisle 1"
                    }
                ],
                "stockItemAvailability": {
                    "dcQuantity": 0,
                    "storeQuantity": 4
                },
                "isEligibleForExpressDelivery": true,
                "isEndlessAisle": false
            },
            "isBulk": false,
            "images": [
                {
                    "altText": "Bluehive 12V 3-Socket with USB Port, LED Power Indicator Front_Three_Fourths_Angled_Right",
                    "mediaType": "GALLERY_IMAGE",
                    "isListingThumbnailImage": "false",
                    "url": "https://media-www.canadiantire.ca/product/automotive/car-care-accessories/auto-electronics/0374571/bluehive-12v-3-socket-with-1-usb-2-1a-6279b26b-6c38-4f7a-93c6-98d6f7f285ce.png"
                },
                {
                    "altText": "Bluehive 12V 3-Socket with USB Port, LED Power Indicator Overhead_Plunge",
                    "mediaType": "GALLERY_IMAGE",
                    "isListingThumbnailImage": "false",
                    "url": "https://media-www.canadiantire.ca/product/automotive/car-care-accessories/auto-electronics/0374571/bluehive-12v-3-socket-with-1-usb-2-1a-9ee8307e-36be-449c-9d51-9f0a43407051.png"
                }
            ],
            "installationEligible": false,
            "installationTermConditionAccepted": false,
            "isPackagedItem": false,
            "isShipHome": true,
            "rebate": null,
            "maxPurchaseQty": null,
            "name": "Bluehive 12V 3-Socket with USB Port, LED Power Indicator",
            "originalPrice": {
                "minPrice": 0,
                "maxPrice": 0,
                "frequency": ""
            },
            "options": [],
            "packagedItem": false,
            "packageId": null,
            "vehicleInformation": null,
            "postTaxRebateAmt": null,
            "postTaxRebateIncluded": null,
            "preTaxRebateAmt": null,
            "preTaxRebateIncluded": null,
            "priceMessage": [
                {
                    "label": null,
                    "tooltip": null
                }
            ],
            "productStatus": "ACTIVE(ACT)",
            "quantity": 1,
            "salePriceEndDate": null,
            "sellable": true,
            "servicesList": null,
            "specifications": [],
            "staggeredGroup": null,
            "totalPrice": {
                "value": 29.99,
                "minPrice": 0,
                "maxPrice": 0,
                "frequency": ""
            },
            "url": "/en/pdp/bh-12v-3skt-1usb2-1a-0374571p.0374571.html",
            "merchCategories": [
                "AUTOMOTIVE",
                null,
                "MOBILE ELECTRONICS",
                "Mobile Power",
                "12V Charging"
            ],
            "someoneElsePickingUp": null,
            "hasStoreAutoServiceCenter": true,
            "isRorProduct": false,
            "fulfillmentOptionAvailable": "bopis and sth",
            "fulFillmentStatus": null,
            "guaranteedFitment": null,
            "Fitted": false,
            "numberOfReviews": 34,
            "Rating": 3.8824,
            "shipFrom": "INSTORE",
            "isUrgentLowStock": true,
            "fitmentTypeCode": null,
            "baseProduct": "0374571P",
            "estimatedDeliveryDate": null,
            "triangleSelectBenefits": {
                "tsBrand": false,
                "tsBrandDiscount": 0.08,
                "tsEverydayDiscount": 0.04
            },
            "triangleBenefits": {
                "tsRewardsBaseLoyalty": 0.004,
                "tsTriangleMastercardBenefits": 0.04
            },
            "isReusableBag": false,
            "mrRegistryId": null,
            "selectedStoreServices": [],
            "supportedStoreServices": [],
            "balloonEntryType": null,
            "entryGroupNumbers": null
        },
        {
            "badges": [
                "EXCLUSIVE"
            ],
            "OfferDesc": null,
            "brand": {
                "label": "BLUEHIVE",
                "url": null
            },
            "productWheelType": "",
            "cartEntryReference": null,
            "code": "0111945",
            "color": null,
            "currentPrice": {
                "value": 69.99,
                "minPrice": 0,
                "maxPrice": 0,
                "frequency": ""
            },
            "discount": {
                "value": 0,
                "minPrice": 0,
                "maxPrice": 0,
                "frequency": ""
            },
            "displayWasLabel": false,
            "feeMessages": [],
            "energyRebateAmt": null,
            "energyRebateIncluded": null,
            "entryNumber": 1,
            "entryType": "PRODUCT (PRO)",
            "errorCode": null,
            "fulfillment": {
                "orderableFromDC": false,
                "isEligibleToPickupFromStore": true,
                "isEligibleToShipHome": true,
                "isStorePickup": false,
                "deliveryMode": "BOPIS",
                "sourceTypes": [
                    {
                        "quantity": 1,
                        "productSourceType": "INSTORE",
                        "etaEarliest": "2024-08-19T17:00:00.000Z",
                        "etaLatest": null,
                        "minOrderQty": 4,
                        "storeShelfLocation": "Aisle 6"
                    }
                ],
                "stockItemAvailability": {
                    "dcQuantity": 0,
                    "storeQuantity": 9
                },
                "isEligibleForExpressDelivery": true,
                "isEndlessAisle": false
            },
            "isBulk": false,
            "images": [
                {
                    "altText": "Bluehive 120W Inverter, with Dual USB Front_Three_Fourths_Angled_Left",
                    "mediaType": "GALLERY_IMAGE",
                    "isListingThumbnailImage": "false",
                    "url": "https://media-www.canadiantire.ca/product/automotive/car-care-accessories/auto-electronics/0111945/bluehive120w-inverter-51d06da0-50ad-41cb-9ab8-33c80644df4e-jpgrendition.jpg"
                },
                {
                    "altText": "Bluehive 120W Inverter, with Dual USB Front_Angled_Left",
                    "mediaType": "GALLERY_IMAGE",
                    "isListingThumbnailImage": "false",
                    "url": "https://media-www.canadiantire.ca/product/automotive/car-care-accessories/auto-electronics/0111945/bluehive120w-inverter-590252ea-0aa2-4e26-b7b3-6b6314d0544e-jpgrendition.jpg"
                }
            ],
            "installationEligible": false,
            "installationTermConditionAccepted": false,
            "isPackagedItem": false,
            "isShipHome": true,
            "rebate": null,
            "maxPurchaseQty": null,
            "name": "Bluehive 120W Inverter, with Dual USB",
            "originalPrice": {
                "minPrice": 0,
                "maxPrice": 0,
                "frequency": ""
            },
            "options": [],
            "packagedItem": false,
            "packageId": null,
            "vehicleInformation": null,
            "postTaxRebateAmt": null,
            "postTaxRebateIncluded": null,
            "preTaxRebateAmt": null,
            "preTaxRebateIncluded": null,
            "priceMessage": [
                {
                    "label": null,
                    "tooltip": null
                }
            ],
            "productStatus": "ACTIVE(ACT)",
            "quantity": 1,
            "salePriceEndDate": null,
            "sellable": true,
            "servicesList": null,
            "specifications": [],
            "staggeredGroup": null,
            "totalPrice": {
                "value": 69.99,
                "minPrice": 0,
                "maxPrice": 0,
                "frequency": ""
            },
            "url": "/en/pdp/bh-120w-inverter-0111945p.0111945.html",
            "merchCategories": [
                "AUTOMOTIVE",
                null,
                "MOBILE ELECTRONICS",
                "Mobile Power",
                "Inverters"
            ],
            "someoneElsePickingUp": null,
            "hasStoreAutoServiceCenter": true,
            "isRorProduct": false,
            "fulfillmentOptionAvailable": "bopis and sth",
            "fulFillmentStatus": null,
            "guaranteedFitment": null,
            "Fitted": false,
            "numberOfReviews": 152,
            "Rating": 3.6316,
            "shipFrom": "INSTORE",
            "isUrgentLowStock": null,
            "fitmentTypeCode": null,
            "baseProduct": "0111945P",
            "estimatedDeliveryDate": null,
            "triangleSelectBenefits": {
                "tsBrand": false,
                "tsBrandDiscount": 0.08,
                "tsEverydayDiscount": 0.04
            },
            "triangleBenefits": {
                "tsRewardsBaseLoyalty": 0.004,
                "tsTriangleMastercardBenefits": 0.04
            },
            "isReusableBag": false,
            "mrRegistryId": null,
            "selectedStoreServices": [],
            "supportedStoreServices": [],
            "balloonEntryType": null,
            "entryGroupNumbers": null
        },
        {
            "badges": [
                "BESTSELLER"
            ],
            "OfferDesc": null,
            "brand": {
                "label": "DEWALT",
                "url": null
            },
            "productWheelType": "",
            "cartEntryReference": null,
            "code": "0112111",
            "color": null,
            "currentPrice": {
                "value": 59.99,
                "minPrice": 0,
                "maxPrice": 0,
                "frequency": ""
            },
            "discount": {
                "value": 0,
                "minPrice": 0,
                "maxPrice": 0,
                "frequency": ""
            },
            "displayWasLabel": false,
            "feeMessages": [],
            "energyRebateAmt": null,
            "energyRebateIncluded": null,
            "entryNumber": 0,
            "entryType": "PRODUCT (PRO)",
            "errorCode": null,
            "fulfillment": {
                "orderableFromDC": false,
                "isEligibleToPickupFromStore": true,
                "isEligibleToShipHome": true,
                "isStorePickup": false,
                "deliveryMode": "BOPIS",
                "sourceTypes": [
                    {
                        "quantity": 1,
                        "productSourceType": "INSTORE",
                        "etaEarliest": "2024-08-19T17:00:00.000Z",
                        "etaLatest": null,
                        "minOrderQty": 1,
                        "storeShelfLocation": "Aisle 6"
                    }
                ],
                "stockItemAvailability": {
                    "dcQuantity": 0,
                    "storeQuantity": 7
                },
                "isEligibleForExpressDelivery": true,
                "isEndlessAisle": false
            },
            "isBulk": false,
            "images": [
                {
                    "altText": "DEWALT 140W Power Inverter Front_Flat",
                    "mediaType": "GALLERY_IMAGE",
                    "isListingThumbnailImage": "false",
                    "url": "https://media-www.canadiantire.ca/product/automotive/electronics/mobile-electronics/0112111/dewalt-140w-power-inverter-0312d415-6045-48e3-b73b-3d42f92df6be-jpgrendition.jpg"
                },
                {
                    "altText": "DEWALT 140W Power Inverter Overhead_Flat",
                    "mediaType": "GALLERY_IMAGE",
                    "isListingThumbnailImage": "false",
                    "url": "https://media-www.canadiantire.ca/product/automotive/car-care-accessories/auto-electronics/0112111/dewalt-140w-power-inverter-a742d7e5-83ec-4509-bd50-ca3ae7c1c24d-jpgrendition.jpg"
                }
            ],
            "installationEligible": false,
            "installationTermConditionAccepted": false,
            "isPackagedItem": false,
            "isShipHome": true,
            "rebate": null,
            "maxPurchaseQty": null,
            "name": "DEWALT 140W Power Inverter",
            "originalPrice": {
                "minPrice": 0,
                "maxPrice": 0,
                "frequency": ""
            },
            "options": [],
            "packagedItem": false,
            "packageId": null,
            "vehicleInformation": null,
            "postTaxRebateAmt": null,
            "postTaxRebateIncluded": null,
            "preTaxRebateAmt": null,
            "preTaxRebateIncluded": null,
            "priceMessage": [
                {
                    "label": null,
                    "tooltip": null
                }
            ],
            "productStatus": "ACTIVE(ACT)",
            "quantity": 1,
            "salePriceEndDate": null,
            "sellable": true,
            "servicesList": null,
            "specifications": [],
            "staggeredGroup": null,
            "totalPrice": {
                "value": 59.99,
                "minPrice": 0,
                "maxPrice": 0,
                "frequency": ""
            },
            "url": "/en/pdp/dwlt-140w-invrtr-0112111p.0112111.html",
            "merchCategories": [
                "AUTOMOTIVE",
                null,
                "MOBILE ELECTRONICS",
                "Mobile Power",
                "Inverters"
            ],
            "someoneElsePickingUp": null,
            "hasStoreAutoServiceCenter": true,
            "isRorProduct": false,
            "fulfillmentOptionAvailable": "bopis and sth",
            "fulFillmentStatus": null,
            "guaranteedFitment": null,
            "Fitted": false,
            "numberOfReviews": 43,
            "Rating": 3.3953,
            "shipFrom": "INSTORE",
            "isUrgentLowStock": null,
            "fitmentTypeCode": null,
            "baseProduct": "0112111P",
            "estimatedDeliveryDate": null,
            "triangleSelectBenefits": {
                "tsBrand": false,
                "tsBrandDiscount": 0.08,
                "tsEverydayDiscount": 0.04
            },
            "triangleBenefits": {
                "tsRewardsBaseLoyalty": 0.004,
                "tsTriangleMastercardBenefits": 0.04
            },
            "isReusableBag": false,
            "mrRegistryId": null,
            "selectedStoreServices": [],
            "supportedStoreServices": [],
            "balloonEntryType": null,
            "entryGroupNumbers": null
        }
    ],
    "orderPickupInPerson": {
        "emailAddress": null,
        "firstName": null,
        "lastName": null
    },
    "paymentInfo": {
        "transactionId": null,
        "cardReferenceNumber": null,
        "newCreditCard": false,
        "loyaltyCardNumber": null,
        "maskedCardNumber": "",
        "cardType": {
            "code": null,
            "name": null
        },
        "expiryMonth": null,
        "expiryYear": null,
        "saved": null,
        "saveToMyProfile": null,
        "isDigitalCard": null,
        "redeemCTMoney": false,
        "redeemCTAmount": {
            "value": 0,
            "minPrice": 0,
            "maxPrice": 0,
            "frequency": ""
        },
        "maxAllowableCTMoneyToRedeem": {
            "value": 271.14,
            "minPrice": 0,
            "maxPrice": 0,
            "frequency": ""
        },
        "eligibleForFinancing": null,
        "financingPlanId": null,
        "billingAddress": null,
        "isLoyaltyRedemptionEnabled": true,
        "remainingTotalCost": {
            "currencyIso": "CAD",
            "value": 0
        },
        "totalGiftCardAmount": {
            "currencyIso": "CAD",
            "value": 0
        },
        "giftCards": []
    },
    "pickupLocation": null,
    "store": {
        "type": [
            "CTR_PROPANEFILL_OR_SWAP"
        ],
        "name": "Niagara Falls North, ON",
        "id": "71",
        "url": "/en/store-details/on/niagara-falls-north-on-71.html",
        "address": {
            "cellphone": null,
            "city": "Niagara Falls",
            "cityDistrict": null,
            "companyName": null,
            "country": {
                "countryIso": null,
                "isocode": "CA",
                "isocodeShort": null,
                "name": "Canada"
            },
            "defaultAddress": false,
            "district": null,
            "email": "ct071@canadiantirecares.ca",
            "formattedAddress": null,
            "id": "8796104359959",
            "line1": "7190 Morrison Street",
            "line2": "Unit A001",
            "phone": "9053584545",
            "postalCode": "L2E 7K5",
            "region": {
                "countryIso": null,
                "isocode": "CA-ON",
                "isocodeShort": null,
                "name": "Ontario"
            },
            "shippingAddress": false,
            "town": "Niagara Falls",
            "visibleInAddressBook": null,
            "lastName": null,
            "firstName": "PAUL MEDEIROS"
        },
        "description": null,
        "displayName": "Niagara Falls North, ON",
        "distanceKm": null,
        "formattedDistance": null,
        "isEligibleForCurbside": true,
        "curbsideFee": null,
        "geoPoint": {
            "latitude": 43.101945,
            "longitude": -79.117377
        },
        "mapIcon": {
            "altText": null,
            "code": null,
            "damCreateDate": null,
            "damPath": null,
            "description": null,
            "format": null,
            "galleryIndex": null,
            "imageSpinIndicator": null,
            "imageType": null,
            "isListingThumbnailImage": null,
            "isPrimary": null,
            "mediaType": null,
            "name": null,
            "order": null,
            "url": null,
            "videoImageThumbnailDAMPath": null,
            "videoImageThumbnailURL": null
        },
        "openingHours": {
            "code": "CTR_CTR_71",
            "name": null,
            "specialDayOpeningList": [],
            "weekDayOpeningList": []
        },
        "storeContent": null,
        "storeImages": []
    },
    "handlingFee": null,
    "orderThreshold": 0,
    "availableDeliveryModes": [
        {
            "code": "STH",
            "description": null,
            "isApplicable": true,
            "name": null,
            "rejectionReason": null,
            "shippingFees": {
                "value": 0,
                "minPrice": 0,
                "maxPrice": 0,
                "frequency": "0"
            },
            "etaEarliest": null,
            "etaLatest": null,
            "orderIn": null
        },
        {
            "code": "EXPRESS",
            "description": null,
            "isApplicable": true,
            "name": null,
            "rejectionReason": null,
            "shippingFees": {
                "value": 0,
                "minPrice": 0,
                "maxPrice": 0,
                "frequency": "0"
            },
            "etaEarliest": "2024-08-19T17:00:00.000Z",
            "etaLatest": null,
            "orderIn": "2024-08-19 14:45:00.0"
        },
        {
            "code": "BOPIS"
        }
    ],
    "flatRateActive": null,
    "isEligibleForReusableBags": true,
    "heliumInflationAddToCartEnabled": null,
    "reusableBagOptIn": null,
    "reusableBagInfo": {
        "name": "Reusable CT Checkout Bag, English",
        "price": 0.35,
        "images": [
            {
                "url": "https://media-www.canadiantire.ca/product/non-merchandising-division/non-merchandising-lob/non-merchandising-category/2988267/reusable-ct-checkout-bag-eng-medium-52d3fd71-b895-4686-8a88-9182864e6f62.png"
            },
            {
                "url": "https://media-www.canadiantire.ca/product/non-merchandising-division/non-merchandising-lob/non-merchandising-category/2988267/reusable-ct-checkout-bag-eng-medium-265227fc-90dd-4e57-84d9-1d340a2617ea.png"
            },
            {
                "url": "https://media-www.canadiantire.ca/product/non-merchandising-division/non-merchandising-lob/non-merchandising-category/2988267/reusable-ct-checkout-bag-eng-medium-7fbfbd51-125d-496d-9de3-2d92e5d022f2.png"
            }
        ]
    },
    "dropOffInstructions": {
        "signatureRequired": false,
        "specialInstructions": null
    },
    "deliveryCostStatus": "UNCHANGED",
    "maxPromoCodeCount": null,
    "appliedVouchersData": [],
    "appliedPromotions": [],
    "estimatedDeliveryDate": null,
    "shippingProgress": null,
    "isSflCartExists": true,
    "bookedAppointments": [],
    "isValidExpressDeliveryAddress": null
}.WphNETQu9adpTmC3jNzJBLioG1lNh24k7RuChvJpVv7_9z5QrDzXaIkqvWJ5UOLDPetymQo07jW9hPYarHgkgr7BlDCcjWy8U05_G19b4T5YYm18LeSF_PM8DfB2tFbzXZ_0KyXiZ1u8r4oyOn8b6Cu3-8VHZarHXXtEApNv7Vy1jZvYa7zXLlhVUbkMxukOY_xBWY3FKoblFp7zmVpRbpeowXJNmefBfqryBIwBGUUrVyBiKYFOnUGklR7b787W2Xkbfzc59cGHtFCnuR1hyeFbthiYJF0CoIK1VeGAlKcnFpAt5gkIzhRVfdyG7iWwDEn7D03yWhveueGpcCvpvQ